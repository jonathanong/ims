
defaults: &defaults
  working_directory: ~/code
  docker:
    - image: circleci/node:8
      environment:
        NPM_CONFIG_LOGLEVEL: error # make npm commands less noisy
        JOBS: max # https://gist.github.com/ralphtheninja/f7c45bdee00784b41fed

browser-defaults: &browser-defaults
  working_directory: ~/code
  docker:
    - image: circleci/node:8-browsers
      environment:
        NPM_CONFIG_LOGLEVEL: error # make npm commands less noisy
        JOBS: max # https://gist.github.com/ralphtheninja/f7c45bdee00784b41fed
        DATABASE_URL: postgres://root:@localhost/ims
        DATABASE_NAME: ims
    - image: mdillon/postgis:10-alpine
      environment:
        POSTGRES_USER: root
        POSTGRES_DB: ims
        POSTGRES_PASSWORD: ""

server-defaults: &server-defaults
  working_directory: ~/code
  docker:
    - image: circleci/node:8
      environment:
        NPM_CONFIG_LOGLEVEL: error # make npm commands less noisy
        JOBS: max # https://gist.github.com/ralphtheninja/f7c45bdee00784b41fed
        DATABASE_URL: postgres://root:@localhost/ims
        DATABASE_NAME: ims
    - image: mdillon/postgis:10-alpine
      environment:
        POSTGRES_USER: root
        POSTGRES_DB: ims
        POSTGRES_PASSWORD: ""

restore_cache: &restore_cache
  restore_cache:
    keys:
      - code-{{ checksum ".nvmrc" }}-{{ checksum "package.json" }}-{{ .Branch }}-{{ .Revision }}
      - code-{{ checksum ".nvmrc" }}-{{ checksum "package.json" }}-{{ .Branch }}-
      - code-{{ checksum ".nvmrc" }}-{{ checksum "package.json" }}-master-
      - code-{{ checksum ".nvmrc" }}-{{ checksum "package.json" }}-
      # We want a clean npm install on package changes

save_cache: &save_cache
  save_cache:
    key: code-{{ checksum ".nvmrc" }}-{{ checksum "package.json" }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - node_modules

restore_workspace_cache: &restore_workspace_cache
  restore_cache:
    keys:
      - workspace-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}

save_workspace_cache: &save_workspace_cache
  save_cache:
    key: workspace-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
    paths:
      - dist
      - storybook-build
      - node_modules/.cache

ignore-gh-pages: &ignore-gh-pages
  filters:
    branches:
      ignore:
        - gh-pages

requires-test: &requires-test
  requires:
    - test

test-coverage: &test-coverage
  run: npx codecov && rm -rf codecov

version: 2
jobs:
  test:
    <<: *server-defaults
    steps:
      - checkout
      - *restore_cache
      - run: npm install
      - run: npm run eslint
      - run: npm run stylelint
      - run: npm run build
      - run: npm run build-storybook
      - run: npm run reset-db
      - run: npm run test:server -- --maxWorkers 4
      - *test-coverage
      - run: npm run test:jsdom -- --maxWorkers 2
      - *test-coverage
      - *save_cache
      - *save_workspace_cache

  test-browsers:
    <<: *browser-defaults
    steps:
      - checkout
      - *restore_cache
      - *restore_workspace_cache
      - run: npm run reset-db
      - run:
          name: server
          command: node bin/serve.js
          background: true
      - run: sleep 3
      - run: npm run monitors
      - run: npm run automation

  monitor-production:
    <<: *browser-defaults
    steps:
      - checkout
      - *restore_cache
      # TODO: use an actual domain
      # - run: IMS_DOMAIN=https://example.com npm run monitors

  monitor-staging:
    <<: *browser-defaults
    steps:
      - checkout
      - *restore_cache
      # TODO: use an actual domain
      # - run: IMS_DOMAIN=https://staging.example.com npm run monitors

  publish-storybook:
    <<: *defaults
    steps:
      - checkout
      - *restore_cache
      - *restore_workspace_cache
      - run: cp -r .circleci storybook-static/
      - run: npx storybook-to-ghpages --existing-output-dir=storybook-static

  build-docker-image:
    machine: true
    steps:
      - checkout
      # - run: docker build . -t jonathanong/ims:$CIRCLE_SHA1 --build-arg GIT_COMMIT_SHA=$CIRCLE_SHA1
      # TODO: add smoke tests

workflows:
  version: 2
  commit:
    jobs:
      - test: *ignore-gh-pages
      - test-browsers: *requires-test
      - build-docker-image:
          requires:
            - test
            - test-browsers
      - publish-storybook:
          requires:
            - test
            - test-browsers
            - build-docker-image
          filters:
            branches:
              only:
                - master
      # TODO: flush this out
      - monitor-production:
          filters:
            branches:
              ignore:
                - master
                - gh-pages
      - monitor-staging:
          filters:
            branches:
              ignore:
                - master
                - gh-pages
  monitor:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - monitor-production
